# .env.template
# -------------
# This file containes the template for the .env file.
# Copy this file to .env and fill in the values.
# Values in this file are placeholders and should be replaced with actual values.
#

# Server settings
# ---------------
# SERVER_PORT : int
#   The port on which the server will run. (e.g., 8080)
#   Please make sure that the port is not already in use.
#
# SERVER_NUM_WORKERS : int
#   The number of worker processes for the server.
#   This value should be set based on the number of CPU cores available.
#   A good rule of thumb is to set the number of workers to twice the number of CPU cores.
#
SERVER_PORT=...
SERVER_NUM_WORKERS=...


# Logging settings
# ----------------
# LOGGER_USE_COLORS : bool
#   Whether to use colors in the logger output.
#   Set this value to "true" to enable colors in the logger output.
#   Otherwise, set it to "false".
#
# LOGGER_ENDPOINT_FILTERS : list[str]
#   List of endpoints to filter in the logger.
#   The requests to these endpoints will not be logged.
#
# LOGGER_STATUS_FILTERS : list[int]
#   List of status codes to filter in the logger.
#   The requests with these status codes will not be logged.
#
# LOGGER_SUSPENDED_PACKAGES : list[str]
#   List of packages to suspend in the logger.
#   Logs generated by these packages will not be displayed in the logger output.
#
# LOGGER_PATH : str
#   The path to the log file.
#   The log file will be created at this path.
#   If the path is not provided, the logger will only log to the console.
#
LOGGER_USE_COLORS=...
LOGGER_ENDPOINT_FILTERS=...
LOGGER_STATUS_FILTERS=...
LOGGER_SUSPENDED_PACKAGES=...
LOGGER_PATH=...


# Gemini API settings
# -------------------
# GEMINI_API_KEY : str
#   The API key to access the Gemini API.
#   You can get the API key by signing up for the Gemini API at https://ai.google.dev/aistudio.
#
# GEMINI_MODEL_NAME : str
#   The name of the model to use for the Gemini API.
#   You can find the model name in the Gemini API dashboard or documentation.
#
GEMINI_API_KEY=...
GEMINI_MODEL_NAME=...


# MongoDB settings
# ----------------
# MONGODB_VOLUME : str
#   Full path to the volume where the MongoDB data will be stored. (e.g., /path/to/mongodb/data)
#   This volume will be mounted to the MongoDB service in the docker-compose file.
#   The volume should be created before running the docker-compose file.
#
# MONGODB_USERNAME : str
#   The username for the MongoDB database. (e.g., root)
#
# MONGODB_PASSWORD : str
#   The password for the MongoDB database. (e.g., Test1234)
#
# MONGODB_HOST : str
#   The hostname of the MongoDB database.
#   The hostname can be an IP address or a domain name.
#   For our case, the hostname is the name of the MongoDB service in the docker-compose file.
#   If you change the service name in the docker-compose file, you should update this value accordingly.
#
# MONGODB_PORT : int
#   The port of the MongoDB database.
#   This port is used for connecting to the MongoDB database from outside the Docker container.
#   The port used inside the Docker container is 27017.
#   Please make sure that the port is not already in use.
#
MONGODB_VOLUME=...
MONGODB_USERNAME=...
MONGODB_PASSWORD=...
MONGODB_HOST=mongodb # This should match the service name in the docker-compose file.
MONGODB_PORT=...


# Redis settings
# --------------
# REDIS_VOLUME : str
#   Full path to the volume where the Redis data will be stored. (e.g., /path/to/redis/data)
#   This volume will be mounted to the Redis service in the docker-compose file.
#   The volume should be created before running the docker-compose file.
#
# REDIS_PASSWORD : str
#   The password for the Redis database. (e.g., Test1234)
#
# REDIS_HOST : str
#   The hostname of the Redis database.
#   The hostname can be an IP address or a domain name.
#   For our case, the hostname is the name of the Redis service in the docker-compose file.
#   If you change the service name in the docker-compose file, you should update this value accordingly.
#
# REDIS_PORT : int
#   The port of the Redis database.
#   This port is used for connecting to the Redis database from outside the Docker container.
#   The port used inside the Docker container is 6379.
#   Please make sure that the port is not already in use.
#
# REDIS_LIST_LIMIT : int
#   The maximum number of items that can be stored in a Redis list.
#   This value is used to limit the number of items stored in the Redis list.
#   When the number of items in the list exceeds this limit, the oldest items are removed.
#
REDIS_VOLUME=...
REDIS_PASSWORD=...
REDIS_HOST=redis # This should match the service name in the docker-compose file.
REDIS_PORT=...
REDIS_LIST_LIMIT=...


# Other settings
# --------------
# MAX_BODY_SIZE_MB : int
#   The maximum size of the request body in MBs.
#   If the request body size exceeds this limit, the request will be rejected.
#
# MAX_NUM_THREADS : int
#   The maximum number of threads that can be spawned by each worker.
#
MAX_BODY_SIZE_MB=...
MAX_NUM_THREADS=...
